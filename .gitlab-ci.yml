stages:
  - build
  - docker
  - manifest

# Build qmlwebviewer in our dockerized build environment...
.build:
  image: $CI_REGISTRY/eviljazz/buildenv-ubuntu-qt5:18.04
  stage: build
  variables:
    CCACHE_DIR: $CI_PROJECT_DIR/.ccache
  cache:
    key: $CI_JOB_NAME
    paths:
      - .ccache
  script:
    - ./bootstrap.sh
    - ./examples/qmlwebviewer/makedistro-docker.sh /opt/qmlwebviewer qmlwebviewer
  artifacts:
    paths:
      - examples/qmlwebviewer/docker/

build-amd64:
  extends: .build
  tags:
    - docker-executor
    - amd64

build-armhf:
  extends: .build
  tags:
    - docker-executor
    - armhf

build-arm64:
  extends: .build
  tags:
    - docker-executor
    - arm64

# Create Docker images for amd64, armhf and arm64
.docker:
  stage: docker
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker build -t qmlwebviewer examples/qmlwebviewer/docker/
    - docker tag qmlwebviewer "$IMAGE_TAG"
    - docker push "$IMAGE_TAG"

docker-amd64:
  extends: .docker
  dependencies:
    - build-amd64
  tags:
    - shell-executor
    - amd64
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/qmlwebviewer-amd64

docker-armhf:
  extends: .docker
  dependencies:
    - build-armhf
  tags:
    - shell-executor
    - armhf
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/qmlwebviewer-armhf

docker-arm64:
  extends: .docker
  dependencies:
    - build-arm64
  tags:
    - shell-executor
    - arm64
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE/qmlwebviewer-arm64

# Create combined Docker image manifest so we do not have to differentiate between platforms
manifest:
  stage: manifest
  tags:
    - shell-executor
    - amd64
  variables:
    DOCKER_CLI_EXPERIMENTAL: enabled
    IMAGE_NAME: $CI_REGISTRY_IMAGE/qmlwebviewer
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "${IMAGE_NAME}-amd64" 
    - docker pull "${IMAGE_NAME}-armhf"
    - docker pull "${IMAGE_NAME}-arm64"
    - docker manifest push --purge "$IMAGE_NAME" || true
    - docker manifest create -a "$IMAGE_NAME" "${IMAGE_NAME}-amd64" "${IMAGE_NAME}-armhf" "${IMAGE_NAME}-arm64"
    - docker manifest inspect "$IMAGE_NAME"
    - docker manifest push --purge "$IMAGE_NAME"
